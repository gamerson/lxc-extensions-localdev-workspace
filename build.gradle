createDockerContainer {
  hostConfig.binds.putAll(["liferayData":"/opt/liferay/data:rw"])
  hostConfig.extraHosts.add("couponpdf.localdev.me:172.150.0.1")
  hostConfig.network = "k3d-lxc-localdev"

	withEnvVar "KUBERNETES_SERVICE_HOST", "k3d-lxc-localdev-server-0"
	withEnvVar "KUBERNETES_SERVICE_PORT", "6443"
	withEnvVar "KUBERNETES_NAMESPACE", "default"

  new ByteArrayOutputStream().withStream { output ->
    exec {
      commandLine "sh", "-c", "kubectl config view --raw -o json | jq -r '.clusters[] | select(.name == \"k3d-lxc-localdev\") | .cluster[\"certificate-authority-data\"]' | base64 --decode"
      standardOutput = output
    }
    withEnvVar "KUBERNETES_CERTIFICATE", output.toString()
  }

  new ByteArrayOutputStream().withStream { output ->
    exec {
      commandLine "sh", "-c", "kubectl --context 'k3d-lxc-localdev' get secret default-token -o jsonpath='{.data.token}' | base64 --decode"
      standardOutput = output
    }
    withEnvVar "KUBERNETES_TOKEN", output.toString()
  }
}

gradle.projectsEvaluated {
  buildDockerImage.dependsOn = buildDockerImage.dependsOn.findAll { !it.path.startsWith(":extensions") }
  project.subprojects.findAll { sub -> sub.tasks.findByName('buildClientExtensionDockerImage') != null }.each { sub ->
      createDockerContainer.hostConfig.extraHosts.add(sub.name + ".localdev.me:172.150.0.1")
  }
}

logsDockerContainer.dependsOn startDockerContainer

task runDockerContainer {
	dependsOn logsDockerContainer
}
